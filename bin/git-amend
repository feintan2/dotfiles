#!/usr/bin/env bash
set -e

if [ -z "$(git status --porcelain | grep -v '^??')" -a "$#" -eq 0 ]; then
  echo "No staged changes to amend onto commit."
  exit 0
fi

branch() {
  git symbolic-ref --quiet --short -- "$1"
}

# git-branch is porcelain, not plumbing, but there's no good plumbing-based
# alternative for `git branch --contains <ref>`.
#
# Instead we'll just trying to make git-branch's output predictable. This is
# what phabricator does: https://secure.phabricator.com/D13989
dependents() {
  RESULT="$(git -c column.ui=never -c color.ui=never branch --contains "$1" | \
    sed 's/^*\? \+//')"
  # remove self from list of dependents
  for DEP in $RESULT; do
    if is_equal_refs "$1" "$DEP"; then
      RESULT="$(printf "%s\n" "$RESULT" | grep -vF "$DEP")"
    fi
  done
  printf "%s" "$RESULT"
}

# Find all dependent branches that are immediately dependent, that is to say
# that they aren't the children of another dependent branch.
#
# TODO: this has poor time complexity.
immediate_dependents() {
  RESULT="$(dependents "$1" | sort)"
  for DEP in $RESULT; do
    if is_equal_refs "$1" "$DEP"; then
      RESULT="$(printf "%s\n" "$RESULT" | grep -vF "$DEP")"
      continue
    fi
    RESULT="$(comm -13 <(dependents "$DEP" | sort) <(printf "%s\n" "$RESULT"))"
  done
  printf "%s" "$RESULT"
}

is_equal_refs() {
  [ "$(git rev-parse --verify "$1")" = "$(git rev-parse --verify "$2")" ]
}

exists() {
  git rev-parse --verify --quiet "$1" >/dev/null
}

ensure_exists() {
  if ! exists "$1"; then
    echo "Can't find branch: $1" >&2
    exit 1;
  fi
}

fixup() {
  ensure_exists "$1"
  ensure_exists "$1.fixup"
  for DEP in $(immediate_dependents "$1.fixup"); do
    git branch -q -- "$DEP.fixup" "$DEP"
    echo "Rebasing $DEP..."
    git rebase --quiet --keep-empty --onto "$1" "$1.fixup" "$DEP"
    fixup "$DEP"
  done
  git branch -q -D "$1.fixup"
}

if [ "$1" = "--fixup" ]; then
  ORIG_BRANCH="$(branch HEAD)"
  git branch --quiet -- "$ORIG_BRANCH.fixup" "$ORIG_BRANCH.preamend"
  fixup "$ORIG_BRANCH"
  git branch --quiet -D "$ORIG_BRANCH.preamend"
  git checkout --quiet "$ORIG_BRANCH"
else
  if branch HEAD >/dev/null && [ -n "$(dependents HEAD)" ]; then
    git branch -- "$(branch HEAD).preamend"
    git commit --amend "$@"
    echo 'You have branches that depended on this one. Run `git-amend --fixup`'
    echo 'to move them on top of the newly amended commit.'
  else
    git commit --amend "$@"
  fi
fi
